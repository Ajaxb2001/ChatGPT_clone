{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abashett\\\\interface_chatgpt\\\\ChatGPT_clone\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport ChatArea from \"./components/ChatArea\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isSidebarVisible, setSidebarVisible] = useState(false);\n  const [chats, setChats] = useState([{\n    id: 1,\n    messages: []\n  }]);\n  const [activeChatId, setActiveChatId] = useState(1);\n  const toggleSidebar = useCallback(() => {\n    setSidebarVisible(prevIsSidebarVisible => !prevIsSidebarVisible);\n  }, []);\n  const startNewChat = useCallback(() => {\n    setChats(prevChats => {\n      const newChatId = prevChats.length + 1;\n      return [...prevChats, {\n        id: newChatId,\n        messages: []\n      }];\n    });\n    setActiveChatId(chats.length + 1);\n  }, [chats.length]);\n  const handleSendMessage = useCallback((chatId, message) => {\n    setChats(prevChats => prevChats.map(chat => chat.id === chatId ? {\n      ...chat,\n      messages: [...chat.messages, message]\n    } : chat));\n  }, []);\n  const activeChat = chats.find(chat => chat.id === activeChatId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [isSidebarVisible && /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `main-container ${isSidebarVisible ? \"with-sidebar\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        toggleSidebar: toggleSidebar,\n        startNewChat: startNewChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: /*#__PURE__*/_jsxDEV(ChatArea, {\n          messages: (activeChat === null || activeChat === void 0 ? void 0 : activeChat.messages) || [],\n          onSendMessage: message => handleSendMessage(activeChatId, message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SuqNl943yysPH46JCiyB+RqDbR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","Sidebar","ChatArea","Footer","Header","jsxDEV","_jsxDEV","App","_s","isSidebarVisible","setSidebarVisible","chats","setChats","id","messages","activeChatId","setActiveChatId","toggleSidebar","prevIsSidebarVisible","startNewChat","prevChats","newChatId","length","handleSendMessage","chatId","message","map","chat","activeChat","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/abashett/interface_chatgpt/ChatGPT_clone/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport ChatArea from \"./components/ChatArea\";\r\nimport Footer from \"./components/Footer\";\r\nimport Header from \"./components/Header\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [isSidebarVisible, setSidebarVisible] = useState(false);\r\n  const [chats, setChats] = useState([{ id: 1, messages: [] }]);\r\n  const [activeChatId, setActiveChatId] = useState(1);\r\n\r\n  const toggleSidebar = useCallback(() => {\r\n    setSidebarVisible((prevIsSidebarVisible) => !prevIsSidebarVisible);\r\n  }, []);\r\n\r\n  const startNewChat = useCallback(() => {\r\n    setChats((prevChats) => {\r\n      const newChatId = prevChats.length + 1;\r\n      return [...prevChats, { id: newChatId, messages: [] }];\r\n    });\r\n    setActiveChatId(chats.length + 1);\r\n  }, [chats.length]);\r\n\r\n  const handleSendMessage = useCallback((chatId, message) => {\r\n    setChats((prevChats) =>\r\n      prevChats.map((chat) =>\r\n        chat.id === chatId\r\n          ? { ...chat, messages: [...chat.messages, message] }\r\n          : chat\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const activeChat = chats.find((chat) => chat.id === activeChatId);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      {isSidebarVisible && <Sidebar />}\r\n      <div\r\n        className={`main-container ${isSidebarVisible ? \"with-sidebar\" : \"\"}`}\r\n      >\r\n        <Header toggleSidebar={toggleSidebar} startNewChat={startNewChat} />\r\n        <div className=\"chat-container\">\r\n          <ChatArea\r\n            messages={activeChat?.messages || []}\r\n            onSendMessage={(message) =>\r\n              handleSendMessage(activeChatId, message)\r\n            }\r\n          />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}