{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abashett\\\\interface_chatgpt\\\\ChatGPT_clone\\\\src\\\\components\\\\ChatArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { FaTelegramPlane } from \"react-icons/fa\"; // Import the clear icon\nimport \"../CSS/ChatArea.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatArea = ({\n  messages,\n  onSendMessage\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [showPrompt, setShowPrompt] = useState(true); // State to control the visibility of the prompt\n\n  const handleSend = () => {\n    if (input.trim()) {\n      onSendMessage({\n        text: input,\n        sender: \"user\"\n      });\n      setInput(\"\");\n      setShowPrompt(false); // Hide the prompt after sending a message\n      // Simulate bot response for demonstration purposes\n      setTimeout(() => {\n        onSendMessage({\n          text: \"This is a placeholder response from ChatGPT\",\n          sender: \"bot\"\n        });\n      }, 1000);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-area\",\n    children: [showPrompt && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"help-prompt\",\n      children: \"How can I help you today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 22\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyPress // Call handleKeyPress on key down\n        ,\n        placeholder: \"Type a message...\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"send-button\",\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          className: \"send-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatArea, \"CnpyIiJMzBYizK1AghtAxbzpFdc=\");\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useState","FaTelegramPlane","jsxDEV","_jsxDEV","ChatArea","messages","onSendMessage","_s","input","setInput","showPrompt","setShowPrompt","handleSend","trim","text","sender","setTimeout","handleKeyPress","e","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","type","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/abashett/interface_chatgpt/ChatGPT_clone/src/components/ChatArea.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { FaTelegramPlane } from \"react-icons/fa\"; // Import the clear icon\r\nimport \"../CSS/ChatArea.css\";\r\n\r\nconst ChatArea = ({ messages, onSendMessage }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [showPrompt, setShowPrompt] = useState(true); // State to control the visibility of the prompt\r\n\r\n  const handleSend = () => {\r\n    if (input.trim()) {\r\n      onSendMessage({ text: input, sender: \"user\" });\r\n      setInput(\"\");\r\n      setShowPrompt(false); // Hide the prompt after sending a message\r\n      // Simulate bot response for demonstration purposes\r\n      setTimeout(() => {\r\n        onSendMessage({\r\n          text: \"This is a placeholder response from ChatGPT\",\r\n          sender: \"bot\",\r\n        });\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-area\">\r\n      {showPrompt && <p className=\"help-prompt\">How can I help you today?</p>}{\" \"}\r\n      {/* Conditional rendering */}\r\n      <div className=\"messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={handleKeyPress} // Call handleKeyPress on key down\r\n          placeholder=\"Type a message...\"\r\n          className=\"input-field\"\r\n        />\r\n        <button onClick={handleSend} className=\"send-button\">\r\n          <FaTelegramPlane className=\"send-icon\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatArea;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}